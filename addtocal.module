<?php
/**
 * @file addtocal.module
 * General functions and hook implementations.
 */

/**
 * Implements hook_menu().
 */
function addtocal_menu() {
  $items['node/%node/%/addtocal.ics'] = array(
    'title' => 'Download Event',
    'page callback' => 'addtocal_download_ics',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_field_formatter_info().
 */
function addtocal_field_formatter_info() {
  return array(
    'addtocal_view' => array(
      'label' => t('AddToCal'),
      'field types' => array('datetime'),
      'settings' => array(
        'location_field' => -1,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function addtocal_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  switch ($display['type']) {
    case 'addtocal_view':
      $element = array();
      $date_element = date_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
      
      $element[0]['date'] = $date_element[0];
      
      $info = addtocal_extract_event_info($entity, $display['settings']['location_field']);

      $element[0] += addtocal_render(
        $info['title'],
        $info['description'],
        $info['url'],
        $info['location'],
        $info['start'],
        $info['end'],
        $display['settings']['location_field']
      );
      
      break;
  }
  
  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function addtocal_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $bundle_name = $field['bundles']['node'][0];
  
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  
  $field_list = field_info_instances('node', $bundle_name);
  
  $options = array('-1' => 'None');
  
  foreach ($field_list as $field) {
    if ($field['widget']['type'] == 'text_textfield') {
      $options[$field['field_name']] = $field['label'];
    }
  }
  
  $element['location_field'] = array(
    '#title' => t('Location Field'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $settings['location_field'],
    '#description' => 'A field to use as the location for calendar events.',
  );
  
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function addtocal_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($settings['location_field'] == -1) {
    $output = 'None';
  }
  else {
    $output = $settings['location_field'];
  }

  return t('Location field: !field', array('!field' => $output));
}

/**
 * Return event information in an associative array based on a given node.
 *
 * @param $node
 *
 * @return array
 */
function addtocal_extract_event_info($node, $location_field) {
  $dates = field_get_items('node', $node, variable_get('addtocal_date_field', 'field_event_date'));
  $start_date = $dates[0]['value'];
  $end_date = $dates[0]['value2'];
  
  $location = field_get_items('node', $node, $location_field);
  $location = ($location) ? check_plain($location[0]['value']) : '';

  //$body = field_get_items('node', $node, 'body');
  //$description = str_replace(PHP_EOL, " ", text_summary($body[0]['value'], $body[0]['format']));
	$description = '';

  $uri = entity_uri('node', $node);

  return array(
    'title' => check_plain($node->title),
    'start' => $start_date,
    'end' => $end_date,
    'location' => $location,
    'description' => $description,
    'url' => $uri['path']
  );
}

/**
 * Generate a render array for the addtocal widget.
 *
 * @param $node
 * @param $location
 * @param $dates
 *   Array containing start and end dates.
 *
 * @return array
 */
function addtocal_render($label, $description, $url, $location, $start_date, $end_date, $location_field) {
  $rfc_dates = addtocal_rfc_3339_date($start_date, $end_date);

  $google_url = url('http://www.google.com/calendar/event', array(
    'query' => array(
      'action' => 'TEMPLATE',
      'text' => $label,
      'dates' => $rfc_dates['both'],
      'sprop' => 'website:' . $_SERVER['HTTP_HOST'],
      'location' => $location,
      'details' => $description,
      'website' => url($url, array('absolute' => TRUE))
    ),
  ));

  $yahoo_url = url('http://calendar.yahoo.com/', array(
    'query' => array(
      'v' => 60,
      'TITLE' => $label,
      'ST' => $rfc_dates['local_start'],
      'DUR' => $rfc_dates['duration'],
      'URL' => $_SERVER['HTTP_HOST'],
      'in_loc' => $location,
    ),
  ));

  $ical_url = $url . '/' . $location_field . '/addtocal.ics';

  return array(
//    '#weight' => 10,
    'button' => array(
      '#markup' => t('Add to Calendar'),
      '#prefix' => '<div id="addtocal">',
      '#suffix' => '</div>',
      '#weight' => 1,
    ),
    'menu' => array(
      '#weight' => 2,
      '#theme' => 'item_list',
      '#items' => array(
        l(t('iCalendar'), $ical_url),
        l(t('Outlook'), $ical_url),
        l(t('Google'), $google_url, array('attributes' => array('target' => '_blank'))),
        l(t('Yahoo'), $yahoo_url, array('attributes' => array('target' => '_blank'))),
      ),
      '#type' => 'ul',
      '#attributes' => array('id' => 'addtocal_menu'),
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'addtocal') . '/addtocal.js',
        ),
        'css' => array(
          drupal_get_path('module', 'addtocal') . '/addtocal.css',
        ),
      ),
    )
  );
}

/**
 * Returns an array containing RFC 3339 formatted start and end dates.
 *
 * @param $start
 *   Start date
 * @param $end
 *   End date
 *
 * @return array
 */
function addtocal_rfc_3339_date($start, $end) {
  if (!$end) {
    $end = $start;
  }

  $start_timestamp = strtotime($start . 'UTC');
  $end_timestamp = strtotime($end . 'UTC');

  $diff_timestamp = $end_timestamp - $start_timestamp;

  $start_date = gmdate('Ymd', $start_timestamp) . 'T' . gmdate('His', $start_timestamp) . 'Z';
  $local_start_date = date('Ymd', $start_timestamp) . 'T' . date('His', $start_timestamp) . '';
  $end_date = gmdate('Ymd', $end_timestamp) . 'T' . gmdate('His', $end_timestamp) . 'Z';
  $local_end_date = date('Ymd', $end_timestamp) . 'T' . date('His', $end_timestamp) . '';

  $diff_hours = str_pad(round(($diff_timestamp / 60) / 60), 2, '0', STR_PAD_LEFT);
  $diff_minutes = str_pad(abs(round($diff_timestamp / 60) - ($diff_hours * 60)), 2, '0', STR_PAD_LEFT);

  $duration = $diff_hours . $diff_minutes;

  return array(
    'start' => $start_date,
    'end' => $end_date,
    'both' => $start_date . '/' . $end_date,
    'local_start' => $local_start_date,
    'local_end' => $local_end_date,
    'duration' => $duration,
  );
}

/**
 * Implements hook_node_view().
 *
 * Outputs an ICS file containing event information for the selected node.
 */
function addtocal_download_ics($node, $location_field) {
  drupal_add_http_header('Content-Type', 'application/calendar; charset=utf-8');
  
  $info = addtocal_extract_event_info($node, $location_field);

  $rfc_dates = addtocal_rfc_3339_date($info['start'], $info['end']);

  echo 'BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//hacksw/handcal//NONSGML v1.0//EN
BEGIN:VEVENT
UID:event-' . $node->nid . '@' . $_SERVER['HTTP_HOST'] . '
DTSTAMP:' . $rfc_dates['start'] . '
DTSTART:' . $rfc_dates['start'] . '
DTEND:' . $rfc_dates['end'] . '
SUMMARY:' . $info['title'] . '
DESCRIPTION: ' . $info['description'] . ' - ' . url($info['url'], array('absolute' => TRUE)) . '
LOCATION:' . $info['location'] . '
END:VEVENT
END:VCALENDAR';

  exit();
}
